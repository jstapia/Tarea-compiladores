%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct _token{
    int clase;
    char valor[32];
    int line;
} token;

token TOKEN;

enum clase {ID=1, ENT, RES, OP, FLOTANTE,PUNT};

void error(char *s);
%}

%option yylineno
%s COMENTARIO
%x COMENTARIO2

letra [a-zA-Z]
letra_ {letra}|_
digito [0-9]
id #({letra_}|{digito})*
entero ({digito})+
real {digito}*"."{digito}+|{digito}+"."{digito}*
exp [eE][+-]?{entero}
flotante ({real}{exp}?|{entero}{exp})[Ff]
reservadas @(if|else|while)
aritmetico [+|-|*|/|%]
relacionales [>|<|>=|<=|=|<>]
asignacion [==]
logicos [$|^|¬]
operadores ({aritmetico}|{relacionales}|{asignacion}|{logicos})
puntuacion [{|}|(|)|,]
%%
{id}    { 
            TOKEN.clase = ID;
            strcpy(TOKEN.valor, yytext);
            TOKEN.line = yylineno;
            return ID;
        }
{reservadas}    {
                    TOKEN.clase = RES;
                    strcpy(TOKEN.valor, yytext);
                    TOKEN.line = yylineno;
                    return RES; 
                }
{operadores}    {
                    TOKEN.clase = OP;
                    strcpy(TOKEN.valor, yytext);
                    TOKEN.line = yylineno;
                    return OP; 
                }
{entero}    { 
                TOKEN.clase = ENT;
                strcpy(TOKEN.valor, yytext);
                TOKEN.line = yylineno;
                return ENT;
            }
{flotante}  { 
                TOKEN.clase = FLOTANTE;
                strcpy(TOKEN.valor, yytext);
                TOKEN.line = yylineno;
                return FLOTANTE;
        }
{puntuacion}  { 
                TOKEN.clase = PUNT;
                strcpy(TOKEN.valor, yytext);
                TOKEN.line = yylineno;
                return PUNT;
        }
[ \t\n\r] {/* Ignora los espacios en blanco*/}
.   {error(yytext);}
%%
int yywrap(){
    return 1;
}

void error(char *s){
    printf("Error léxico: %s, en la línea %d\n",s,yylineno);
}

int main(int argc, char **argv){
    FILE *f;
    if(argc<2){
        printf("Falta archivo\n");
        exit(-1);
    }
    f = fopen(argv[1],"r");
    if(!f){
        printf("No se puede abrir el archivo\n");
        exit(-1);
    }
    yyin = f;
    int tok = yylex();
    while(tok != 0){
        printf("%d\n",tok);
        tok = yylex();
    }    
    return 0;
}
